from householder import *
import unittest

class TestHouseholder(unittest.TestCase):
    
    def test_calculate_alpha(self):
        matrix = Matrix([4, 1, -2, 2, 1, 2, 0, 1, -2, 0, 3, -2, 2, 1, -2, -1], 4, 4)
        self.assertAlmostEqual(Householder.calculate_alpha(matrix, 0), 3.0, delta=0.000001)
        
    def test_calculate_w(self):
        matrix = Matrix([4, 1, -2, 2, 1, 2, 0, 1, -2, 0, 3, -2, 2, 1, -2, -1], 4, 4)
        w = Householder.calculate_w(matrix, 0)
        self.assertAlmostEqual(w.get(0), math.sqrt(6.0)/3.0, delta=0.000001)
        self.assertAlmostEqual(w.get(1), -math.sqrt(6.0)/6.0, delta=0.000001)
        self.assertAlmostEqual(w.get(2), math.sqrt(6.0)/6.0, delta=0.000001)
        
    def test_calculate_P(self):
        matrix = Matrix([4, 1, -2, 2, 1, 2, 0, 1, -2, 0, 3, -2, 2, 1, -2, -1], 4, 4)     
        P = Householder.calculate_P(matrix, 0)
        self.assertAlmostEqual(P.get(0, 0), 1.0, delta=0.000001)
        self.assertAlmostEqual(P.get(0, 1), 0.0, delta=0.000001)
        self.assertAlmostEqual(P.get(0, 2), 0.0, delta=0.000001)
        self.assertAlmostEqual(P.get(0, 3), 0.0, delta=0.000001)
        self.assertAlmostEqual(P.get(1, 0), 0.0, delta=0.000001)
        self.assertAlmostEqual(P.get(1, 1), -1.0/3.0, delta=0.000001)
        self.assertAlmostEqual(P.get(1, 2), 2.0/3.0, delta=0.000001)
        self.assertAlmostEqual(P.get(1, 3), -2.0/3.0, delta=0.000001)
        self.assertAlmostEqual(P.get(2, 0), 0.0, delta=0.000001)
        self.assertAlmostEqual(P.get(2, 1), 2.0/3.0, delta=0.000001)
        self.assertAlmostEqual(P.get(2, 2), 2.0/3.0, delta=0.000001)
        self.assertAlmostEqual(P.get(2, 3), 1.0/3.0, delta=0.000001)
        self.assertAlmostEqual(P.get(3, 0), 0.0, delta=0.000001)
        self.assertAlmostEqual(P.get(3, 1), -2.0/3.0, delta=0.000001)
        self.assertAlmostEqual(P.get(3, 2), 1.0/3.0, delta=0.000001)
        self.assertAlmostEqual(P.get(3, 3), 2.0/3.0, delta=0.000001)
        
    def test_iter(self):
        A1 = Matrix([4, 1, -2, 2, 1, 2, 0, 1, -2, 0, 3, -2, 2, 1, -2, -1], 4, 4)        
        P1 = Householder.calculate_P(A1, 0)
        self.assertAlmostEqual(P1.get(0, 0), 1.0, delta=0.000001)
        self.assertAlmostEqual(P1.get(0, 1), 0.0, delta=0.000001)
        self.assertAlmostEqual(P1.get(0, 2), 0.0, delta=0.000001)
        self.assertAlmostEqual(P1.get(0, 3), 0.0, delta=0.000001)
        self.assertAlmostEqual(P1.get(1, 0), 0.0, delta=0.000001)
        self.assertAlmostEqual(P1.get(1, 1), -1.0/3.0, delta=0.000001)
        self.assertAlmostEqual(P1.get(1, 2), 2.0/3.0, delta=0.000001)
        self.assertAlmostEqual(P1.get(1, 3), -2.0/3.0, delta=0.000001)
        self.assertAlmostEqual(P1.get(2, 0), 0.0, delta=0.000001)
        self.assertAlmostEqual(P1.get(2, 1), 2.0/3.0, delta=0.000001)
        self.assertAlmostEqual(P1.get(2, 2), 2.0/3.0, delta=0.000001)
        self.assertAlmostEqual(P1.get(2, 3), 1.0/3.0, delta=0.000001)
        self.assertAlmostEqual(P1.get(3, 0), 0.0, delta=0.000001)
        self.assertAlmostEqual(P1.get(3, 1), -2.0/3.0, delta=0.000001)
        self.assertAlmostEqual(P1.get(3, 2), 1.0/3.0, delta=0.000001)
        self.assertAlmostEqual(P1.get(3, 3), 2.0/3.0, delta=0.000001)
        
        A2 = P1 * A1 * P1
        
        self.assertAlmostEqual(A2.get(0, 0), 4.0, delta=0.000001)
        self.assertAlmostEqual(A2.get(0, 1), -3.0, delta=0.000001)
        self.assertAlmostEqual(A2.get(0, 2), 0.0, delta=0.000001)
        self.assertAlmostEqual(A2.get(0, 3), 0.0, delta=0.000001)
        self.assertAlmostEqual(A2.get(1, 0), -3.0, delta=0.000001)
        self.assertAlmostEqual(A2.get(1, 1), 10.0/3.0, delta=0.000001)
        self.assertAlmostEqual(A2.get(1, 2), 1.0, delta=0.000001)
        self.assertAlmostEqual(A2.get(1, 3), 4.0/3.0, delta=0.000001)
        self.assertAlmostEqual(A2.get(2, 0), 0.0, delta=0.000001)
        self.assertAlmostEqual(A2.get(2, 1), 1.0, delta=0.000001)
        self.assertAlmostEqual(A2.get(2, 2), 5.0/3.0, delta=0.000001)
        self.assertAlmostEqual(A2.get(2, 3), -4.0/3.0, delta=0.000001)
        self.assertAlmostEqual(A2.get(3, 0), 0.0, delta=0.000001)
        self.assertAlmostEqual(A2.get(3, 1), 4.0/3.0, delta=0.000001)
        self.assertAlmostEqual(A2.get(3, 2), -4.0/3.0, delta=0.000001)
        self.assertAlmostEqual(A2.get(3, 3), -1.0, delta=0.000001)
        
        P2 = Householder.calculate_P(A2, 1)
        
        self.assertAlmostEqual(P2.get(0, 0), 1.0, delta=0.000001)
        self.assertAlmostEqual(P2.get(0, 1), 0.0, delta=0.000001)
        self.assertAlmostEqual(P2.get(0, 2), 0.0, delta=0.000001)
        self.assertAlmostEqual(P2.get(0, 3), 0.0, delta=0.000001)
        self.assertAlmostEqual(P2.get(1, 0), 0.0, delta=0.000001)
        self.assertAlmostEqual(P2.get(1, 1), 1.0, delta=0.000001)
        self.assertAlmostEqual(P2.get(1, 2), 0.0, delta=0.000001)
        self.assertAlmostEqual(P2.get(1, 3), 0.0, delta=0.000001)
        self.assertAlmostEqual(P2.get(2, 0), 0.0, delta=0.000001)
        self.assertAlmostEqual(P2.get(2, 1), 0.0, delta=0.000001)
        self.assertAlmostEqual(P2.get(2, 2), -3.0/5.0, delta=0.000001)
        self.assertAlmostEqual(P2.get(2, 3), -4.0/5.0, delta=0.000001)
        self.assertAlmostEqual(P2.get(3, 0), 0.0, delta=0.000001)
        self.assertAlmostEqual(P2.get(3, 1), 0.0, delta=0.000001)
        self.assertAlmostEqual(P2.get(3, 2), -4.0/5.0, delta=0.000001)
        self.assertAlmostEqual(P2.get(3, 3), 3.0/5.0, delta=0.000001)
        
        A3 = P2 * A2 * P2
        
        self.assertAlmostEqual(A3.get(0, 0), 4.0, delta=0.000001)
        self.assertAlmostEqual(A3.get(0, 1), -3.0, delta=0.000001)
        self.assertAlmostEqual(A3.get(0, 2), 0.0, delta=0.000001)
        self.assertAlmostEqual(A3.get(0, 3), 0.0, delta=0.000001)
        self.assertAlmostEqual(A3.get(1, 0), -3.0, delta=0.000001)
        self.assertAlmostEqual(A3.get(1, 1), 10.0/3.0, delta=0.000001)
        self.assertAlmostEqual(A3.get(1, 2), -5.0/3.0, delta=0.000001)
        self.assertAlmostEqual(A3.get(1, 3), 0.0, delta=0.000001)
        self.assertAlmostEqual(A3.get(2, 0), 0.0, delta=0.000001)
        self.assertAlmostEqual(A3.get(2, 1), -5.0/3.0, delta=0.000001)
        self.assertAlmostEqual(A3.get(2, 2), -33.0/25.0, delta=0.000001)
        self.assertAlmostEqual(A3.get(2, 3), 68.0/75.0, delta=0.000001)
        self.assertAlmostEqual(A3.get(3, 0), 0.0, delta=0.000001)
        self.assertAlmostEqual(A3.get(3, 1), 0.0, delta=0.000001)
        self.assertAlmostEqual(A3.get(3, 2), 68.0/75.0, delta=0.000001)
        self.assertAlmostEqual(A3.get(3, 3), 149.0/75.0, delta=0.000001)

    def test_execute(self):
        A = Matrix([4, 1, -2, 2, 1, 2, 0, 1, -2, 0, 3, -2, 2, 1, -2, -1], 4, 4)
        result = Householder.execute(A)
        
        self.assertAlmostEqual(result.get(0, 0), 4.0, delta=0.000001)
        self.assertAlmostEqual(result.get(0, 1), -3.0, delta=0.000001)
        self.assertAlmostEqual(result.get(0, 2), 0.0, delta=0.000001)
        self.assertAlmostEqual(result.get(0, 3), 0.0, delta=0.000001)
        self.assertAlmostEqual(result.get(1, 0), -3.0, delta=0.000001)
        self.assertAlmostEqual(result.get(1, 1), 10.0/3.0, delta=0.000001)
        self.assertAlmostEqual(result.get(1, 2), -5.0/3.0, delta=0.000001)
        self.assertAlmostEqual(result.get(1, 3), 0.0, delta=0.000001)
        self.assertAlmostEqual(result.get(2, 0), 0.0, delta=0.000001)
        self.assertAlmostEqual(result.get(2, 1), -5.0/3.0, delta=0.000001)
        self.assertAlmostEqual(result.get(2, 2), -33.0/25.0, delta=0.000001)
        self.assertAlmostEqual(result.get(2, 3), 68.0/75.0, delta=0.000001)
        self.assertAlmostEqual(result.get(3, 0), 0.0, delta=0.000001)
        self.assertAlmostEqual(result.get(3, 1), 0.0, delta=0.000001)
        self.assertAlmostEqual(result.get(3, 2), 68.0/75.0, delta=0.000001)
        self.assertAlmostEqual(result.get(3, 3), 149.0/75.0, delta=0.000001)

if __name__ == '__main__':
    unittest.main()